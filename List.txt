mkdir mysite ສ້າງກ່ອງ
ແຊັກແພັກເກດ $ pip list ຫຼື  $ pip freeze

$ python -m pip install --upgrade pip

ຕິດຕັ້ງ $ pip install virtualenv
( $ virtualenv env_django ຫຼື
 $ virtualenv -p python env ຫຼື
ບໍໄດ້)
$ python -m venv env ຕອນສ້າງ env
$ py -m venv env


virtualenv env_syterm01

.\env_syterm01\Scripts\activate

ເຂົ້າກ່ອງ ເປີດໃຊ້ງານ Venv  $ .\env_django\Scripts\activate   .\env_django\Scripts\activate   .\env_django\Scripts\activate   
ເຂົ້າກ່ອງ ປີດໃຊ້ງານ Venv  $ deactivate 
(venv) E:\Python_Project\DJ\venv>


ໃຊ້ງານຢູ່ $    Scripts\activate  ແອັກຕີເວດ ເປິດສະຄິບໂຕຊ່ວຍຕົວໃຊ້ງານ

$dir ກວດສອບຂໍ້ມູນໃນກ່ອງຕາມຟາດ

$  notepad requirements.txt
$ pip freeze > requirements.txt ໂນດລາຍບາລີໄວ້
$ pip install -r requirements.txt
$ pip uninstall -r requirements.txt
 ລົງລາຍບາໄລລີຕາມ notepad

ຕີດຕັ້ງ ດີຈັງໂກໃນສະພາບຈຳລອງ Venv
$ pip install Django==4.0.1
$ django-admin version ກວດເວີຊັ່ນ
ກວດເວິຊັ້ນ $ python -m django --version

ສ້າງໂປເຈັກ $ django-admin startproject cpuzshpiping. ຖ້າມີ . ຈະສ້າງຂື້ນຍັບອອກມາຕົງພາດທີ່ຢູ່ປະຈຸບັນ
$ django-admin startproject mysite . postkhy

$ python manage.py runserver

ສ້າງapp  $ python manage.py startapp myapp i
$ python manage.py runserverpython manage.py shell

>>> from blog.models import Post 
>>> data = Post(title='Aara', body = 'Thaidj fgr aaa post')
>>> data.save()


>>> obj = Post.objects.all()    
>>> obj
<QuerySet [<Post: Aara>, <Post: BBBbb>]>

>>> single = Post.objects.get(id=1)
>>> single
<Post: Aara>
>>> single.title
'Aara'
>>> single.body 
'Thaidj fgr aaa post'

$ exit()

$ python manage.py createsuperuser bounmy /bounmy54344245a@gmail.com / 54344245@888

$ python manage.py makemigrations polls
$ python manage.py migrate

SengEmail bounmytrk54@gmail.com  /  54344245bM  2058987388   boun5445re@hotmail.com 


unrar x bin888.rar
python3.13 -m venv env_django
           mkvirtualenv env_django --python=python3.13
source env_django/bin/activate

ຄຳສັ່ງກອບຈາງຕະລາງSQLໄວ
python manage.py dumpdata app888.Bin888 --natural-foreign --natural-primary --indent 4 > bin888_data.json

ນຳເຂົ້າຂໍມຸນເກົ່າ python manage.py loaddata bin888_data.json
ລົບຕາຕະລາງ 
python manage.py shell
>>> from app888.models import Bin888
>>> Bin888.objects.all().delete()
>>> exit()

# settings.py

# สำหรับ Development (เครื่องของคุณ)
CHROMEDRIVER_PATH_DEV = r"D:\wab\bin\bin888\bin888\drivers\chromedriver.exe"
CHROME_BINARY_PATH_DEV = r"C:\Program Files\Google\Chrome\Application\chrome.exe" # ตัวอย่าง Path ของ Chrome บน Windows

# สำหรับ Production (PythonAnywhere)
CHROMEDRIVER_PATH_PROD = '/usr/bin/chromedriver'
CHROME_BINARY_PATH_PROD = '/usr/bin/google-chrome'

# ตรวจสอบว่ารันอยู่ใน Production หรือ Development
# คุณสามารถสร้างตัวแปรนี้เอง หรือใช้ DEBUG
# สมมติว่าใน production เราจะตั้ง DEBUG = False
if DEBUG: # หรือ is_production = False
    CHROMEDRIVER_PATH = CHROMEDRIVER_PATH_DEV
    CHROME_BINARY_PATH = CHROME_BINARY_PATH_DEV
else: # Production
    CHROMEDRIVER_PATH = CHROMEDRIVER_PATH_PROD
    CHROME_BINARY_PATH = CHROME_BINARY_PATH_PROD


# views.py
from django.conf import settings # Import settings

CHROMEDRIVER_PATH_ON_PA = '/usr/bin/chromedriver' # Path ของ Chromedriver บน PythonAnywhere
# ไม่ต้องกำหนด CHROMEDRIVER_PATH ที่นี่แล้ว
# CHROMEDRIVER_PATH = r"D:\wab\bin\bin888\bin888\drivers\chromedriver.exe" # ลบทิ้ง

def get_driver():
    print("กำลังเริ่มต้น Chrome driver...")
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")

    # ดึง Path มาจาก settings.py
    chrome_options.binary_location = settings.CHROME_BINARY_PATH # ดึงจาก settings
    chromedriver_path = settings.CHROMEDRIVER_PATH # ดึงจาก settings

    try:
        service = Service(executable_path=chromedriver_path)
        driver = webdriver.Chrome(service=service, options=chrome_options)
        # ... ส่วนที่เหลือเหมือนเดิม ...
        return driver
    except Exception as e:
        # ... ส่วน error handling ...
        raise

